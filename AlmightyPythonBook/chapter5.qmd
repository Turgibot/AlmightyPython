
# Basic Operators in Python  

Before we jump into coding, let’s take a moment to understand **operators**—what they are, what they do, and why they are essential in programming.  

## What Are Operators? Why Do We Need Them?  

Operators are special symbols in Python that allow us to perform computations and manipulate data. They are the building blocks of expressions and help us execute mathematical operations, assign values to variables, compare values, and even make logical decisions in our programs. Without operators, coding would be extremely limited, as we wouldn’t be able to perform calculations, check conditions, or control program flow effectively.  

### Basic Operators  

These fundamental operators are widely used in almost every Python program:  

- **Arithmetic Operators** – Perform mathematical operations like addition, subtraction, multiplication, and division (`+`, `-`, `*`, `/`).  
- **Assignment Operators** – Assign values to variables (`=`, `+=`, `-=`).  
- **Comparison Operators** – Compare two values and return `True` or `False` (`==`, `!=`, `<`, `>`).  
- **Logical Operators** – Combine boolean values and control flow (`and`, `or`, `not`).  

### Advanced Operators  

Some operators require a deeper understanding of programming concepts and will be introduced later in the book:  

- **Bitwise Operators** – Perform operations at the binary level (`&`, `|`, `^`, `~`).  
- **Membership Operators** – Check if a value exists within a sequence (`in`, `not in`).  
- **Identity Operators** – Compare memory locations of two objects (`is`, `is not`).  

We will begin by exploring **arithmetic operators**, followed by **assignment operators**, as they are foundational to understanding more advanced operations in Python.  

## Arithmetic Operators in Python  

Arithmetic operators are the most basic and frequently used operators. They allow you to perform mathematical calculations such as addition, subtraction, multiplication, and division. Let’s go over each one with examples to see how they work.

### **Addition (`+`)**

The addition operator is used to add two values. It works with numbers (integers and floats) and even with strings (by concatenating them).

```{python}
# Integer addition
a = 10
b = 5
result = a + b
print(result) 
```
```{python}
# Float addition
x = 10.5
y = 4.3
result = x + y
print(result) 
```
```{python}
# String addition (concatenation)
greeting = "Hello, "
name = "Almighty Python!"
message = greeting + name
print(message)  

```

### Subtraction (`-`)

The subtraction operator (`-`) is used to subtract one value from another. It can also be used with both integers and floats.

```{python}
# Integer Subtraction
a = 10
b = 3
result = a - b
print(result) 

result = b - a
print(result)

```

```{python}
# Float Subtraction
a = 10
b = 3
result = a - b
print(result) 

result = b - a
print(result)

```

```{python}
# Mixed Type Subtraction
a = 2
b = 1.2
result = a - b
print(result) 

result = b - a
print(result)

```


### Division (`/`)

The division operator is used to divide one number by another. In Python, it always returns a float value, even if the result is a whole number.

```{python}
# Integer division
a = 10
b = 5
result = a / b
print(result)  #(Note that it's a float)

# Float division
x = 10.5
y = 4.3
result = x / y
print(result) 

```


### Floor Division (`//`)
The floor division operator returns the largest integer less than or equal to the result of division. It essentially rounds down the result.

```{python}
# Integer floor division
a = 10
b = 3
result = a // b
print(result)  

# Float floor division
x = 10.5
y = 4.3
result = x // y
print(result)  

```


### Modulus (%)
The modulus operator returns the remainder of the division of two numbers. This is useful for determining if a number is divisible by another or for wrapping around values in cyclic operations (like circular buffers).

```{python}
# Integer modulus
a = 10
b = 3
result = a % b
print(result)  # 10 divided by 3 leaves a remainder of 1

# Float modulus
x = 10.5
y = 4.3
result = x % y
print(result)  # 10.5 divided by 4.3 leaves a remainder of 1.9
```

### Exponentiation (`**`)
The exponentiation operator raises the first number to the power of the second number.

```{python}
# Integer exponentiation
a = 2
b = 3
result = a ** b # 2 raised to the power of 3
print(result)  

# Float exponentiation
x = 2.5
y = 5.5
result = x ** y # 2.5 raised to the power of 5.5
print(result)  

# Mixed exponentiation
a = 3
b = 2.5
result = a ** b # (3 raised to the power of 2.5)
print(result)
```

### Operator Precedence – The Order of Operations

In Python, like in regular mathematics, arithmetic operators have an order in which they are evaluated. This order is crucial for understanding how complex expressions are computed. While we will focus on arithmetic operators for now, keep in mind that the order of operations applies to all operators in Python, and we’ll revisit it as we explore more complex operations later in the book.

Here is the order of precedence for the basic arithmetic operators:

1. **Exponentiation (`**`)**  
   The exponentiation operator is evaluated first. It raises a number to the power of another.

2. **Multiplication (`*`), Division (`/`), Floor Division (`//`), Modulus (`%`)**  
   These operators are evaluated next, from left to right.

3. **Addition (`+`), Subtraction (`-`)**  
   Finally, addition and subtraction are evaluated, also from left to right.

#### Example of Operator Precedence

Let’s see how this works in action:

```python
result = 3 + 2 * 5 - 10 / 2
print(result)
```
#### Here’s how the expression is evaluated:

* First, 2 * 5 is computed (multiplication).
* Then, 10 / 2 is computed (division).
* Next, the addition and subtraction are performed from left to right: 3 + (result of multiplication) and then subtracting the division result.
Thus, the order is followed strictly as per the rules of precedence, and the result will be 10.0.

#### Parentheses Override the Precedence
You can control the order of operations in your code by using parentheses () to change the default precedence. Anything inside parentheses is computed first.

```{python}
result = (3 + 2) * (5 - 10 / 2)
print(result)
```
Here, the addition and subtraction are computed first due to parentheses, followed by multiplication and division.

::: {.callout-important}
This section introduces the general order of arithmetic operations in Python. As we advance and introduce more operators, you’ll need to remember that operator precedence determines how expressions are evaluated, and we will come back to this concept when we cover more complex topics in the book.
:::

### Using `e` in Arithmetic Operations

In Python, the letter `e` is often used in scientific notation to represent powers of 10. It is not an operator, but rather a part of a number written in exponential form. The `e` can be used in arithmetic operations just like any other number. The expression `2e3` means \( 2 \times 10^3 \), which is equal to 2000.

#### Example:

```python
# Using e for scientific notation
result = 2e3  # 2 * 10^3 = 2000
print(result)
```

#### Combining `e` with other Arithmetic Operators

You can also perform arithmetic operations with numbers written in scientific notation. Let’s see how this works with different operators:

```{python}
# Adding, subtracting, multiplying and dividing with e notation
add_result = 2e3 + 5e2  # Adding 2000 + 500
sub_result = 5e3 - 1e3  # Subtracting 5000 - 1000
mul_result = 3e2 * 4e1  # Multiplying 300 * 40
div_result = 1e4 / 2e2  # Dividing 10000 / 200
small_value = 1e-4  # A small value, equivalent to 0.0001

print("Addition:", add_result)    
print("Subtraction:", sub_result)
print("Multiplication:", mul_result) 
print("Division:", div_result)  
print("Small value:", small_value)  

```

#### Exponentiation with `e`

When used with exponentiation (`**`), `e` represents powers of 10, and the operation behaves like normal arithmetic:


```{python}
exp_result = 2e3 ** 2  # 2000^2
print(exp_result)

```
#### Why Use `e`?
Using `e` allows us to easily handle large or small numbers without typing out all the zeros. It’s especially helpful in scientific and engineering calculations where such numbers frequently occur.


### Summary of Arithmetic Operators

In this chapter, we explored the core arithmetic operators in Python and how they are used to perform calculations. 

#### Key Points
- **Order of Operations**: Python follows a specific order of precedence when evaluating arithmetic expressions. Exponentiation (`**`) is evaluated first, followed by multiplication, division, floor division, and modulus, and finally, addition and subtraction. Parentheses can be used to control the order of evaluation.
  
- **Using `e` in Arithmetic**: We also discussed how `e` is used in Python to represent numbers in scientific notation (e.g., `2e3` represents 2000). We demonstrated how to perform arithmetic with scientific notation and how `e` can be combined with other operators like addition, subtraction, multiplication, division, and exponentiation.

#### Arithmetic Operators Table

| Operator | Description                                    | Example                      | Output     |
|----------|------------------------------------------------|------------------------------|------------|
| `+`      | Addition: Adds two operands.                   | `5 + 3`                      | `8`        |
| `-`      | Subtraction: Subtracts the second operand from the first. | `5 - 3`                      | `2`        |
| `*`      | Multiplication: Multiplies two operands.       | `5 * 3`                      | `15`       |
| `/`      | Division: Divides the first operand by the second. Returns float. | `5 / 3`                      | `1.6667...`|
| `//`     | Floor Division: Divides and returns the largest integer less than or equal to the result. | `5 // 3`                     | `1`        |
| `%`      | Modulus: Returns the remainder of a division operation. | `5 % 3`                      | `2`        |
| `**`     | Exponentiation: Raises the first operand to the power of the second. | `2 ** 3`                     | `8`        |


#### Important Notes:

* **Integer Division (`//`)** always returns the largest whole number less than or equal to the result of division.
* **Modulus (`%`)** can be used to check divisibility and is commonly used in algorithms like checking if a number is even or odd.
* **Exponentiation (`**`)** is often used for calculating powers, square roots, and mathematical functions.
  

#### Next Steps
As you continue to experiment with these operators, remember that these foundational concepts will help you tackle more advanced topics later in the book. You will explore more operators and complex expressions as we build on this knowledge.

::: {.callout-tip}
Feel free to modify the examples and experiment with different operations. Create your own expressions and see how Python handles them. The more you play with these operators, the more comfortable you will become using them in real-world applications.
:::

# Basic Operators and Input

## Arithmetic operators (+, -, *, /)
## Comparison and logical operators
## Taking user input with input()
## Project 1: Simple Temperature Converter
## Convert between Celsius, Fahrenheit, and Kelvin
## Use input from the user and perform arithmetic operations
## Format and display the result
