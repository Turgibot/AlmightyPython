[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AlmightyPythonBook",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\nMarkdown allows you to write using an easy-to-read, easy-to-write plain text format.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Why This Book?\nWelcome to Almighty Python: Master Python by Building Real Applications, your ultimate guide to becoming a professional Python developer! Whether you’re taking your first steps into the world of coding or you’re an experienced developer looking to level up your Python skills, this book is designed for you.\nIn today’s world, Python is everywhere. From powering the biggest tech giants to enabling groundbreaking innovations in artificial intelligence (AI), web development, data science, and automation—it’s no surprise that Python has become one of the most popular and sought-after programming languages. This book is your companion on a journey to master Python while building practical, real-world applications along the way.\nLearning to code can feel overwhelming at first. There are countless tutorials, courses, and articles, each offering bits and pieces of knowledge. What makes this book different? It’s simple: you’ll learn by building. We won’t just throw theory at you—we’ll guide you through creating a range of real applications, starting from basic command-line tools to full-fledged web apps and machine learning projects.\nBy the time you reach the final chapters, you won’t just “know Python”; you’ll have the skills and confidence to build your own applications and solve real-world problems with code.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#who-is-this-book-for",
    "href": "intro.html#who-is-this-book-for",
    "title": "1  Introduction",
    "section": "1.2 Who Is This Book For?",
    "text": "1.2 Who Is This Book For?\n\nAbsolute Beginners: If you’ve never written a line of code, don’t worry. This book will ease you into programming concepts, explaining everything in plain, simple language.\n\nIntermediate Developers: If you’ve dabbled in Python before, you’ll find plenty of new concepts, advanced techniques, and hands-on projects that will push your skills to the next level.\n\nFuture Python Professionals: This book will help you build the foundation for a successful career as a Python developer by covering everything from Python basics to advanced topics like object-oriented programming, web development, databases, and machine learning.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#what-youll-learn",
    "href": "intro.html#what-youll-learn",
    "title": "1  Introduction",
    "section": "1.3 What You’ll Learn",
    "text": "1.3 What You’ll Learn\nHere’s a glimpse of what you’ll build and learn in this book:\n\nPython Fundamentals: Learn the core concepts of Python by building real applications.\n\nAPIs and Automation: Build applications that connect to external services and automate repetitive tasks.\n\nObject-Oriented Programming (OOP): Create more structured and maintainable code by mastering OOP.\n\nWeb Development: Build web applications using Python frameworks.\n\nData Science and Machine Learning: Explore how Python is used in data analysis and AI with hands-on examples.\n\nEach chapter introduces a new set of skills, guiding you through writing actual code, fixing common problems, and understanding how everything works under the hood. Along the way, you’ll gain insight into how Python is used in the real world.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#how-to-use-this-book",
    "href": "intro.html#how-to-use-this-book",
    "title": "1  Introduction",
    "section": "1.4 How to Use This Book",
    "text": "1.4 How to Use This Book\nEach chapter is designed to build on the previous one. While you’re welcome to jump around, we recommend following the chapters in order, especially if you’re a beginner. Don’t rush—take your time to understand the concepts and code, and don’t hesitate to experiment with your own ideas. The best way to learn is by doing.\nThis book also pairs with a series of online courses offered on Udemy, giving you the opportunity to watch code in action and practice what you learn in an interactive environment.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#a-quick-word-about-python-in-the-ai-era",
    "href": "intro.html#a-quick-word-about-python-in-the-ai-era",
    "title": "1  Introduction",
    "section": "1.5 A Quick Word About Python in the AI Era",
    "text": "1.5 A Quick Word About Python in the AI Era\nYou’re learning Python at the perfect time. With the rise of artificial intelligence and automation, Python is more relevant than ever. It’s the language of choice for AI developers, data scientists, and automation engineers. This book will give you the tools to start building smart, AI-driven applications while also preparing you for the future of programming.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#ready-to-get-started",
    "href": "intro.html#ready-to-get-started",
    "title": "1  Introduction",
    "section": "1.6 Ready to Get Started?",
    "text": "1.6 Ready to Get Started?\nLet’s dive right in! The first chapter will introduce you to Python, why it’s the perfect language for beginners, and how to set up your Python environment. From there, you’ll start writing your first lines of Python code and building your first application. Remember, the goal is to learn by doing—so get ready to write lots of code and have fun along the way!\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter1.html",
    "href": "chapter1.html",
    "title": "2  Introduction to Python",
    "section": "",
    "text": "2.1 What is Python? And Why Even Bother Learning It Now (In the AI Era)?\nWhen you go and look for a formal definition, you’ll probably see something like:\n“Python is a general-purpose, high-level, interpreted programming language created by Guido van Rossum and first released in 1991. It is known for its simplicity and readability, making it a great choice for beginners as well as experienced developers.”\nWell, if you’re new to programming, this definition probably didn’t tell you much. Since this book is intended for readers at all programming levels, we will break down each new term in a simple and clear way. Sometimes, if necessary, we’ll explain things more than once—because understanding the basics well is key to mastering Python. Let’s go over some of the important keywords in this definition in a way that actually makes sense:\nLanguage: Python is a programming language because it gives you a way to communicate with computers. You write Python code to tell the computer what to do, just like you’d tell a friend what to do using words.\nGeneral-purpose: Python is a general-purpose language, meaning you can use it for pretty much anything. Whether you want to build a website, analyze data, make games, automate tasks, or even explore artificial intelligence, Python (and this book) has got you covered.\nHigh-level: Python is called a high-level language because it’s designed to be easy for humans to read and write. Unlike low-level languages that deal directly with how the computer works, Python allows you to focus on solving problems without worrying about technical details like memory management. This makes coding much simpler and more beginner-friendly.\nThis is actually a good place to have our first glance at some code. Let’s say you would like to write a program that interacts with a user by asking for its name.\nIn python as it is a High-level language this can be a simple one liner code:\nname = input(“Enter your name:”)\nNow lets see what the same program looks like when it is implemented in C which is a Low-level language :\nThe main reason for this extra lines of code is that a low-level language gives us more control over hardware and system resources, hence it requires you - the programmer, to also think about memory management, data types, explicit error handling, and more.\nPython as a High-Level language is designed to abstract away most of the complexities of dealing with the machine or hardware. You can focus on writing logic, rather than worrying about memory management, compilation, or system-specific details. The language is forgiving and lets you focus on what you want to achieve without dealing with low-level operations.\nInterpreted: Python is an interpreted language, meaning the computer reads and runs your code one step at a time instead of processing everything at once before running it. This makes testing and debugging easier but can sometimes make Python a bit slower than languages that compile everything first.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "chapter1.html#what-is-python-and-why-even-bother-learning-it-now-in-the-ai-era",
    "href": "chapter1.html#what-is-python-and-why-even-bother-learning-it-now-in-the-ai-era",
    "title": "2  Introduction to Python",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main() {\n    char name[100];  // Allocate memory for the name\n\n    // Get user input\n    printf(\"Enter your name: \");\n    scanf(\"%99s\", name);  // Caution with buffer overflow!\n    \n    return 0;\n}\n\n\n\n\n\n\n\nNote how long and much more complicated it is!",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "chapter1.html#why-learn-python-now-the-ai-connection",
    "href": "chapter1.html#why-learn-python-now-the-ai-connection",
    "title": "2  Introduction to Python",
    "section": "2.2 Why Learn Python Now? (The AI Connection)",
    "text": "2.2 Why Learn Python Now? (The AI Connection)\nWe’re living in the AI era, where artificial intelligence is transforming industries at an unprecedented pace. From self-driving cars to chat bots, AI is everywhere—and Python is at the heart of it all.\nPython is the go-to language for AI and machine learning because of its vast ecosystem of tools (libraries), such as TensorFlow, PyTorch, and Scikit-learn (no worries we will learn about libraries in the next lessons). These tools make it easier to build intelligent systems without having to write complex code from scratch.\nBut AI isn’t the only reason to learn Python. Python’s simplicity, versatility, and beginner-friendly nature make it a perfect starting point for anyone who wants to step into the world of programming, whether your goal is to get into AI, web development, automation, or just solve everyday problems with code.\nIn the next section, we’ll explore exactly why Python is considered one of the most beginner-friendly programming languages—and why it’s often recommended as the first language to learn.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "chapter1.html#why-is-python-beginner-friendly",
    "href": "chapter1.html#why-is-python-beginner-friendly",
    "title": "2  Introduction to Python",
    "section": "2.3 Why is Python Beginner-Friendly?",
    "text": "2.3 Why is Python Beginner-Friendly?\nSimple and Clear Syntax Python’s syntax is often described as “elegant” because of how clean and straightforward it is. If you’re just starting out with programming, Python lets you focus on learning core programming concepts, such as variables, loops, and functions, without getting bogged down by complex syntax rules. For example, here’s how you would write a program that print “Hello, World!” to the screen in Python:\n\nprint(\"Hello, World!\")\n\nHello, World!\n\n\nCompared to other High-level languages like C++ or Java, where you’d have to write more boilerplate code, Python’s version is minimal, allowing you to start writing meaningful code right away.\nReadable Code Python places a strong emphasis on code readability. Its use of indentation (rather than curly braces in many other languages) to define code blocks makes Python programs visually cleaner and easier to follow. This structure makes Python ideal for beginners because it encourages the creation of clean and well-organized code, which is key to developing good programming habits early on.\nDynamic Typing Python is dynamically typed, which means you don’t need to specify the type of variable (like an integer or string) when you declare it. You can directly assign a value to a variable, and Python will figure out the type for you. For example:\n\nx = 5           # x is automatically an integer\nname = \"Alice\"  # name is automatically a string\n\nThis is different from languages like Java or C++, where you have to explicitly define the type of each variable. Dynamic typing makes Python more flexible and allows you to focus on solving problems rather than worrying about types.\nLarge, Supportive Community Python has one of the largest and most active programming communities in the world. Whether you need help troubleshooting an issue or want to learn about the latest Python libraries, there are countless forums, tutorials, and documentation available to help you. The Python community is known for being friendly and welcoming to newcomers, and you’ll find plenty of resources to guide you every step of the way as you start learning.\nExtensive Libraries and Frameworks Another reason Python is beginner-friendly is because of its vast selection of libraries and frameworks. These pre-built tools allow you to avoid reinventing the wheel and instead focus on building your applications faster. For example, if you want to build a website, you can use frameworks like Django or Flask. If you’re interested in data science, there are powerful libraries like Pandas, NumPy, and Matplotlib to help you manipulate and visualize data. These libraries are designed to be easy to use and can dramatically speed up your development process.\nCross-Platform Compatibility Python is a cross-platform language, meaning you can run your Python code on any major operating system, such as Windows, macOS, and Linux, without having to make any changes. This makes Python a versatile choice for developers who want to build applications that can work across multiple platforms.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "chapter2.html",
    "href": "chapter2.html",
    "title": "3  Setting Up Python on Your Machine",
    "section": "",
    "text": "3.1 Step 1: Check if Python is Already Installed\nBefore we can start writing Python code, we need to make sure that Python is installed and properly set up on your computer. Whether you’re using Windows, macOS, or Linux, the process is straightforward, but there are some important details to take note of.\nFirst, let’s check if Python is already installed on your machine. This can be done through your terminal or command prompt.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setting Up Python on Your Machine</span>"
    ]
  },
  {
    "objectID": "chapter2.html#step-1-check-if-python-is-already-installed",
    "href": "chapter2.html#step-1-check-if-python-is-already-installed",
    "title": "3  Setting Up Python on Your Machine",
    "section": "",
    "text": "Windows - open the Command Prompt by pressing Win-RWin-R, typing cmd, and hitting EnterEnter. macOS - open the Terminal by pressing Cmd+Alt+TCmd+Alt+T. Linux - open the Terminal by pressing Ctrl+Alt+TCtrl+Alt+T.\nType the following command and press Enter:\n \n     user@computer&gt; python --version\n \nIf Python is installed, you should see something like:\n\n    user@computer&gt; Python 3.10.x\n\nIf not, you’ll see an error message telling you that python is not recognized.\n\n\n\n\n\n\n\nTip\n\n\n\n\nDon’t worry if the version number isn’t exactly what you see in the examples. It’s perfectly fine if you see Python 3.11 or Python 3.12—those will work great for this book!\n\nWhat’s important is that you’re using Python 3.10 and higher. Avoid using Python versions lower than 3.10, as some newer features or improvements might not work properly in older versions.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setting Up Python on Your Machine</span>"
    ]
  },
  {
    "objectID": "chapter2.html#step-2-installing-python",
    "href": "chapter2.html#step-2-installing-python",
    "title": "3  Setting Up Python on Your Machine",
    "section": "3.2 Step 2: Installing Python",
    "text": "3.2 Step 2: Installing Python\nIf Python is not already installed or if you need to install a different version, follow the steps below:\n\n3.2.1 Windows\n\nVisit the official Python website.\nClick on the “Download Python” button (make sure to select version 3.x).\nRun the installer and check the box that says “Add Python to PATH” before clicking “Install Now”.\nOnce installed, verify by running python --version in the Command Prompt.\n\n\n\n3.2.2 macOS\nmacOS often comes with Python pre-installed. However, it’s typically an older version, so it’s recommended to install the latest version of Python 3.\n\nYou can install Python using Homebrew (a popular package manager for macOS):\nbrew install python\nAlternatively, you can download the latest Python installer from the Python website.\nVerify installation by running:\npython3 --version\n\n\n\n3.2.3 Linux\nMost Linux distributions come with Python pre-installed, but you can install or update to the latest version using the package manager.\n\nOpen your terminal.\nFor Debian-based distributions (like Ubuntu), run:\nsudo apt update\nsudo apt install python3\nFor Red Hat-based distributions (like Fedora), run:\nsudo dnf install python3\nVerify installation by running:\npython3 --version",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setting Up Python on Your Machine</span>"
    ]
  },
  {
    "objectID": "chapter2.html#step-3-installing-the-python-extension-in-vscode",
    "href": "chapter2.html#step-3-installing-the-python-extension-in-vscode",
    "title": "3  Setting Up Python on Your Machine",
    "section": "3.3 Step 3: Installing the Python Extension in VSCode",
    "text": "3.3 Step 3: Installing the Python Extension in VSCode\nNow that you have VSCode installed, it’s time to make it Python-ready! VSCode is a powerful editor, but it can’t run or understand Python by itself. This is where extensions come in. Extensions are small add-ons that extend the functionality of VSCode to support specific tasks or languages. For Python, the extension we need is called the Python extension.\n\n3.3.1 Installing the Python Extension:\n\nOpen VSCode.\nOn the left sidebar, click on the Extensions icon, or press  ( on macOS) to open the Extensions view.\nIn the search bar, type Python.\nThe Python extension by Microsoft should be the first result. Click Install.\n\nThe Python extension provides key features like: - Syntax highlighting (color-coding your Python code) - Code completion (helping you type faster and avoid errors) - Integrated debugging (for fixing bugs in your code) - Running Python code directly in the editor\nAfter installing the Python extension, VSCode will be ready to run your Python code.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setting Up Python on Your Machine</span>"
    ]
  },
  {
    "objectID": "chapter2.html#step-4-running-your-first-python-script-in-vscode",
    "href": "chapter2.html#step-4-running-your-first-python-script-in-vscode",
    "title": "3  Setting Up Python on Your Machine",
    "section": "3.4 Step 4: Running Your First Python Script in VSCode",
    "text": "3.4 Step 4: Running Your First Python Script in VSCode\nNow that we have the Python extension installed, let’s test everything to make sure it’s working!\n\nOpen VSCode and create a new file called hello.py.\nType the following code:\nprint(\"Hello, Almighty Python\")\nSave the file by hitting Ctrl+SCtrl+S or Cmd+SCmd+S.\nTo run your script, follow these steps:\n\nOpen the integrated terminal in VSCode (go to View &gt; Terminal or press Ctrl+`Ctrl+`).\nIn the terminal, type the following:\n\npython hello.py\n\nYou should see the following output in the terminal:\nHello, Almighty Python\nCongratulations! You’ve just written and executed your first Python program.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setting Up Python on Your Machine</span>"
    ]
  },
  {
    "objectID": "chapter2.html#step-5-common-problems-and-troubleshooting",
    "href": "chapter2.html#step-5-common-problems-and-troubleshooting",
    "title": "3  Setting Up Python on Your Machine",
    "section": "3.5 Step 5: Common Problems and Troubleshooting",
    "text": "3.5 Step 5: Common Problems and Troubleshooting\n\n3.5.1 Problem 1: python Command Not Found\nSolution: Python might not be added to your system’s PATH.\n- Windows: Reinstall Python and check the option to “Add to PATH” during installation.\n- macOS/Linux: Try using python3 instead. If that works, create an alias (alias python=python3).\n\n\n3.5.2 Problem 2: VSCode Doesn’t Detect Python\nSolution:\n1. Open the Command Palette by pressing Ctrl+Shift+PCtrl+Shift+P or Cmd+Shift+PCmd+Shift+P. 2. Type Python: Select Interpreter and choose the Python version you installed.\n\n\n3.5.3 Problem 3: Code Runner Doesn’t Work\nSolution: Ensure you’ve installed the Python extension by searching for and installing it from the Extensions view. Save your file with the .py extension.\n\n\n3.5.4 Problem 4: Terminal Shows Permission Denied (macOS/Linux)\nSolution: Check file permissions. Use chmod +x filename.py to make the file executable.\n\n\n\n\n\n\n\nNote\n\n\n\nNow that your environment is ready, you’re all set to begin your Python journey! In the next section, we’ll explore the basics of Python syntax and build your first real-world application. Let’s get coding!",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setting Up Python on Your Machine</span>"
    ]
  },
  {
    "objectID": "chapter3.html",
    "href": "chapter3.html",
    "title": "4  Setting Up the Coding Environment",
    "section": "",
    "text": "4.1 Step 1: Installing VSCode\nIn this chapter, we’ll set up everything you need to start coding in Python. To make things simple and fun, we’ll use Visual Studio Code (VSCode)—a free, lightweight, and powerful editor. If you’re new to coding, don’t worry. We’ll guide you step by step. By the end of this chapter, you’ll be all set to write and run your first Python program!\nAlthough we’ll focus on using VSCode, feel free to use another editor if you prefer. The steps might differ slightly, but the core concepts remain the same.\nOnce installed, launch VSCode. You should see the welcome screen!",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Setting Up the Coding Environment</span>"
    ]
  },
  {
    "objectID": "chapter3.html#step-1-installing-vscode",
    "href": "chapter3.html#step-1-installing-vscode",
    "title": "4  Setting Up the Coding Environment",
    "section": "",
    "text": "Go to the Visual Studio Code website.\nYou’ll see download options for Windows, macOS, and Linux. Click the one for your operating system.\nOnce the download is complete, open the installer and follow the instructions.\n\n\n\n\n\n\n\nTip\n\n\n\n\nWindows: Make sure you check the option to “Add to PATH” during installation. This will make it easier to use VSCode from the command line.\nmacOS: Drag the VSCode icon into your Applications folder.\nLinux: Depending on your distribution, you might need to install it using a package manager (apt, yum, or dnf).\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nPin VSCode to your taskbar or dock for easy access.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Setting Up the Coding Environment</span>"
    ]
  },
  {
    "objectID": "chapter3.html#step-2-verify-your-python-installation",
    "href": "chapter3.html#step-2-verify-your-python-installation",
    "title": "4  Setting Up the Coding Environment",
    "section": "4.2 Step 2: Verify your Python installation",
    "text": "4.2 Step 2: Verify your Python installation\n\n\n\n\n\n\nNote\n\n\n\nYou may skip this step if you have previously verified python on your machine.\n\n\nPython is the language we’ll be using throughout this book. Let’s make sure it’s installed.\n\nOpen a terminal (Command Prompt on Windows, Terminal on macOS/Linux).\nType the following command:\n\n    user@computer&gt; python --version\n\nIf Python is installed, you’ll see something like:\n\n    user@computer&gt; Python 3.10.x\n\nIf not, you’ll see an error message telling you that python is not recognized. Please refer to the python installation section of this book and return here when done.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Setting Up the Coding Environment</span>"
    ]
  },
  {
    "objectID": "chapter3.html#step-3-installing-the-python-extension-in-vscode",
    "href": "chapter3.html#step-3-installing-the-python-extension-in-vscode",
    "title": "4  Setting Up the Coding Environment",
    "section": "4.3 Step 3: Installing the Python Extension in VSCode",
    "text": "4.3 Step 3: Installing the Python Extension in VSCode\nNow that you have VSCode installed, it’s time to make it Python-ready! VSCode is a powerful editor, but it can’t run or understand Python by itself. This is where extensions come in. Extensions are small add-ons that extend the functionality of VSCode to support specific tasks or languages. For Python, the extension we need is called the Python extension.\n\n4.3.1 Installing the Python Extension:\n\nOpen VSCode.\nOn the left sidebar, click on the Extensions icon, or press Ctrl+Shift+X (Cmd+Shift+X on macOS) to open the Extensions view.\nIn the search bar, type Python.\nThe Python extension by Microsoft should be the first result. Click Install.\n\nThe Python extension provides key features like: - Syntax highlighting (color-coding your Python code) - Code completion (helping you type faster and avoid errors) - Integrated debugging (for fixing bugs in your code) - Running Python code directly in the editor\nAfter installing the Python extension, VSCode will be ready to run your Python code.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Setting Up the Coding Environment</span>"
    ]
  },
  {
    "objectID": "chapter3.html#step-4-running-your-first-python-script-in-vscode",
    "href": "chapter3.html#step-4-running-your-first-python-script-in-vscode",
    "title": "4  Setting Up the Coding Environment",
    "section": "4.4 Step 4: Running Your First Python Script in VSCode",
    "text": "4.4 Step 4: Running Your First Python Script in VSCode\nNow that we have the Python extension installed, let’s test everything to make sure it’s working!\n\nOpen VSCode and create a new file called hello.py.\nType the following code:\nprint(\"Hello, Almighty Python!\")\nSave the file (Ctrl+S or Cmd+S).\nTo run your script, follow these steps:\n\nOpen the integrated terminal in VSCode (go to View &gt; Terminal or press Ctrl+`).\nIn the terminal, type the following:\n\npython hello.py\n\nYou should see the following output in the terminal:\nHello, Almighty Python!\npgsql Copy Edit\nCongratulations! You’ve just written and executed your first Python program.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Setting Up the Coding Environment</span>"
    ]
  },
  {
    "objectID": "chapter3.html#step-5-common-problems-and-troubleshooting",
    "href": "chapter3.html#step-5-common-problems-and-troubleshooting",
    "title": "4  Setting Up the Coding Environment",
    "section": "4.5 Step 5: Common Problems and Troubleshooting",
    "text": "4.5 Step 5: Common Problems and Troubleshooting\n\n4.5.1 Problem 1: python Command Not Found\nSolution: Python might not be added to your system’s PATH.\n- Windows: Reinstall Python and check the option to “Add to PATH” during installation.\n- macOS/Linux: Try using python3 instead. If that works, create an alias (alias python=python3).\n\n\n4.5.2 Problem 2: VSCode Doesn’t Detect Python\nSolution:\n1. Open the Command Palette (Ctrl+Shift+P or Cmd+Shift+P).\n2. Type Python: Select Interpreter and choose the Python version you installed.\n\n\n4.5.3 Problem 3: Code Runner Doesn’t Work\nSolution: Ensure you’ve installed the Python extension by searching for and installing it from the Extensions view. Save your file with the .py extension.\n\n\n4.5.4 Problem 4: Terminal Shows Permission Denied (macOS/Linux)\nSolution: Check file permissions. Use chmod +x filename.py to make the file executable.\n\n\n\n\n\n\n\nNote\n\n\n\nNow that your environment is ready, you’re all set to begin your Python journey! In the next section, we’ll explore the basics of Python syntax and build your first real-world application. Let’s get coding!",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Setting Up the Coding Environment</span>"
    ]
  },
  {
    "objectID": "chapter4.html",
    "href": "chapter4.html",
    "title": "5  Python Syntax and Variables",
    "section": "",
    "text": "5.1 Comments in Python\nIn this chapter, we’ll cover the basics of Python’s syntax, data types, and how to use variables. These concepts are essential for writing your first Python programs. Remember, the best way to learn is by coding!\nComments are lines in your code that Python ignores when running the program. They are used to explain what the code does, making it easier to understand for yourself and others. Comments can also be used to temporarily disable parts of your code.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python Syntax and Variables</span>"
    ]
  },
  {
    "objectID": "chapter4.html#comments-in-python",
    "href": "chapter4.html#comments-in-python",
    "title": "5  Python Syntax and Variables",
    "section": "",
    "text": "5.1.1 Single-line Comments\nIn Python, single-line comments start with the # symbol.\n\n# This is a comment\nprint(\"Hello, Almighty Python!\")  # This comment is ignored\n\nHello, Almighty Python!\n\n\n\n\n5.1.2 Multi-line Comments\nPython doesn’t have a specific multi-line comment syntax, but you can use triple quotes (’’’) to create a block of comments.\n\n'''\nThis is a multi-line comment.\nYou can use it to write longer explanations\nor to temporarily disable parts of your code.\n'''\nprint(\"Multi-line comments are helpful!\")\n\nMulti-line comments are helpful!\n\n\n\n\n5.1.3 Why Use Comments?\n\nExplain your code: Help yourself or others understand what the code does.\nDebugging: Comment out parts of the code to isolate problems.\nDocumentation: Make your code more readable and easier to maintain.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python Syntax and Variables</span>"
    ]
  },
  {
    "objectID": "chapter4.html#variables-and-assignment",
    "href": "chapter4.html#variables-and-assignment",
    "title": "5  Python Syntax and Variables",
    "section": "5.2 Variables and Assignment",
    "text": "5.2 Variables and Assignment\nIn Python, variables are used to store data. You assign a value to a variable using the = symbol. The variable name should be descriptive and follow certain rules (e.g., no spaces or special characters, should not start with a number). Variables have type that depends on the type of data they store. We’ll talk more about data types shortly but for now, take a look at these four variables and note the different types assigned to them.\n\nname = \"Almighty Python\"\nage = 25\nprice = 19.99\nis_cool = True\n\nprint(name)  \nprint(age)   \nprint(price)\nprint(is_cool)\n\nAlmighty Python\n25\n19.99\nTrue",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python Syntax and Variables</span>"
    ]
  },
  {
    "objectID": "chapter4.html#basic-data-types-string-integer-float-boolean",
    "href": "chapter4.html#basic-data-types-string-integer-float-boolean",
    "title": "5  Python Syntax and Variables",
    "section": "5.3 Basic Data Types: String, Integer, Float, Boolean",
    "text": "5.3 Basic Data Types: String, Integer, Float, Boolean\n\n5.3.1 String (str)\nStrings represent text and are enclosed in quotes ('single' or \"double\").\n\n\n\n\n\n\nTip\n\n\n\nUse triple quotes (\"\"\" or ''') for multi-line text.\n\n\n\nname = 'Almighty Python - Learning about strings'\nquestion = \"What is Python?\"\ndescription = \"\"\"It is a powerful and beginner-friendly programming\nlanguage that supports writing long texts on multiple lines like so.\"\"\"\n\nprint(name)\nprint(question)\nprint(description)\n\nAlmighty Python - Learning about strings\nWhat is Python?\nIt is a powerful and beginner-friendly programming\nlanguage that supports writing long texts on multiple lines like so.\n\n\n\n\n5.3.2 String Concatenation and Repetition\nYou can combine strings using the ++ operator or repeat them using **.\n\nfirst_name = \"Almighty\"\nlast_name = \"Python\"\nfull_name = first_name + \" \" + last_name\nprint(full_name) \n\nrepeated = \"Hi! \" * 3\nprint(repeated)\n\nAlmighty Python\nHi! Hi! Hi! \n\n\n\n\n\n\n\n\nImportant\n\n\n\nYou can do many more operations with strings. Actually string operations are covered in their own section - definitely something to look forward to!\n\n\n\n\n5.3.3 Integer (int)\nAn integer is a whole number without a decimal point. Integers can be positive, negative, or zero.\n\nage = 25\nyear = 2025\nbalance = -100\n\nprint(age + 5)      # Addition\nprint(year - 2000)  # Subtraction\nprint(balance * 2)  # Multiplication\n\n30\n25\n-200\n\n\n\n\n5.3.4 Float (float)\nA float is a number with a decimal point. It is used for precise values like measurements, scientific calculations, or financial data.\n\nprice = 19.99\ntemperature = -10.5\npi = 3.14159\n\nprint(price * 2)         \nprint(temperature + 5)   \nprint(pi + pi)   \n\n39.98\n-5.5\n6.28318\n\n\n\n\n5.3.5 Boolean (bool)\nBooleans represent logical values: True or False. They are used for decision-making and comparisons in your programs.\n\nis_python_fun = True\nis_sky_green = False\n\nprint(is_python_fun)      \nprint(is_sky_green)             \n\nTrue\nFalse\n\n\n\n\n5.3.6 Type converstion and interrogation\nTODO",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python Syntax and Variables</span>"
    ]
  },
  {
    "objectID": "chapter4.html#summary",
    "href": "chapter4.html#summary",
    "title": "5  Python Syntax and Variables",
    "section": "5.4 Summary",
    "text": "5.4 Summary\nIn this chapter, you’ve learned about Python’s syntax, basic data types, variables, and how to use comments. These are fundamental concepts that will help you build a strong foundation for writing Python programs.\nKey Takeaways:\n\nPython has four main basic data types: str, int, float, and bool.\n\nUse variables to store data and make your code more readable.\n\nComments improve code clarity and help with debugging.\n\n\n\n\n\n\n\nTip\n\n\n\n💡 Remember: Keep experimenting! The best way to learn is by trying different things in your code. Modify the examples, create your own, and observe the results.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python Syntax and Variables</span>"
    ]
  },
  {
    "objectID": "chapter5.html",
    "href": "chapter5.html",
    "title": "6  Basic Operators in Python",
    "section": "",
    "text": "6.1 What Are Operators? Why Do We Need Them?\nBefore we jump into coding, let’s take a moment to understand operators—what they are, what they do, and why they are essential in programming.\nOperators are special symbols in Python that allow us to perform computations and manipulate data. They are the building blocks of expressions and help us execute mathematical operations, assign values to variables, compare values, and even make logical decisions in our programs. Without operators, coding would be extremely limited, as we wouldn’t be able to perform calculations, check conditions, or control program flow effectively.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic Operators in Python</span>"
    ]
  },
  {
    "objectID": "chapter5.html#what-are-operators-why-do-we-need-them",
    "href": "chapter5.html#what-are-operators-why-do-we-need-them",
    "title": "6  Basic Operators in Python",
    "section": "",
    "text": "6.1.1 Basic Operators\nThese fundamental operators are widely used in almost every Python program:\n\nArithmetic Operators – Perform mathematical operations like addition, subtraction, multiplication, and division (+, -, *, /).\n\nAssignment Operators – Assign values to variables (=, +=, -=).\n\nComparison Operators – Compare two values and return True or False (==, !=, &lt;, &gt;).\n\nLogical Operators – Combine boolean values and control flow (and, or, not).\n\n\n\n6.1.2 Advanced Operators\nSome operators require a deeper understanding of programming concepts and will be introduced later in the book:\n\nBitwise Operators – Perform operations at the binary level (&, |, ^, ~).\n\nMembership Operators – Check if a value exists within a sequence (in, not in).\n\nIdentity Operators – Compare memory locations of two objects (is, is not).\n\nWe will begin by exploring arithmetic operators, followed by assignment operators, as they are foundational to understanding more advanced operations in Python.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic Operators in Python</span>"
    ]
  },
  {
    "objectID": "chapter5.html#arithmetic-operators-in-python",
    "href": "chapter5.html#arithmetic-operators-in-python",
    "title": "6  Basic Operators in Python",
    "section": "6.2 Arithmetic Operators in Python",
    "text": "6.2 Arithmetic Operators in Python\nArithmetic operators are the most basic and frequently used operators. They allow you to perform mathematical calculations such as addition, subtraction, multiplication, and division. Let’s go over each one with examples to see how they work.\n\n6.2.1 Addition (+)\nThe addition operator is used to add two values. It works with numbers (integers and floats) and even with strings (by concatenating them).\n\n# Integer addition\na = 10\nb = 5\nresult = a + b\nprint(result) \n\n15\n\n\n\n# Float addition\nx = 10.5\ny = 4.3\nresult = x + y\nprint(result) \n\n14.8\n\n\n\n# String addition (concatenation)\ngreeting = \"Hello, \"\nname = \"Almighty Python!\"\nmessage = greeting + name\nprint(message)  \n\nHello, Almighty Python!\n\n\n\n\n6.2.2 Subtraction (-)\nThe subtraction operator (-) is used to subtract one value from another. It can also be used with both integers and floats.\n\n# Integer Subtraction\na = 10\nb = 3\nresult = a - b\nprint(result) \n\nresult = b - a\nprint(result)\n\n7\n-7\n\n\n\n# Float Subtraction\na = 10\nb = 3\nresult = a - b\nprint(result) \n\nresult = b - a\nprint(result)\n\n7\n-7\n\n\n\n# Mixed Type Subtraction\na = 2\nb = 1.2\nresult = a - b\nprint(result) \n\nresult = b - a\nprint(result)\n\n0.8\n-0.8\n\n\n\n\n6.2.3 Division (/)\nThe division operator is used to divide one number by another. In Python, it always returns a float value, even if the result is a whole number.\n\n# Integer division\na = 10\nb = 5\nresult = a / b\nprint(result)  #(Note that it's a float)\n\n# Float division\nx = 10.5\ny = 4.3\nresult = x / y\nprint(result) \n\n2.0\n2.441860465116279\n\n\n\n\n6.2.4 Floor Division (//)\nThe floor division operator returns the largest integer less than or equal to the result of division. It essentially rounds down the result.\n\n# Integer floor division\na = 10\nb = 3\nresult = a // b\nprint(result)  \n\n# Float floor division\nx = 10.5\ny = 4.3\nresult = x // y\nprint(result)  \n\n3\n2.0\n\n\n\n\n6.2.5 Modulus (%)\nThe modulus operator returns the remainder of the division of two numbers. This is useful for determining if a number is divisible by another or for wrapping around values in cyclic operations (like circular buffers).\n\n# Integer modulus\na = 10\nb = 3\nresult = a % b\nprint(result)  # 10 divided by 3 leaves a remainder of 1\n\n# Float modulus\nx = 10.5\ny = 4.3\nresult = x % y\nprint(result)  # 10.5 divided by 4.3 leaves a remainder of 1.9\n\n1\n1.9000000000000004\n\n\n\n\n6.2.6 Exponentiation (**)\nThe exponentiation operator raises the first number to the power of the second number.\n\n# Integer exponentiation\na = 2\nb = 3\nresult = a ** b # 2 raised to the power of 3\nprint(result)  \n\n# Float exponentiation\nx = 2.5\ny = 5.5\nresult = x ** y # 2.5 raised to the power of 5.5\nprint(result)  \n\n# Mixed exponentiation\na = 3\nb = 2.5\nresult = a ** b # (3 raised to the power of 2.5)\nprint(result)\n\n8\n154.40808887540913\n15.588457268119896\n\n\n\n\n6.2.7 Operator Precedence – The Order of Operations\nIn Python, like in regular mathematics, arithmetic operators have an order in which they are evaluated. This order is crucial for understanding how complex expressions are computed. While we will focus on arithmetic operators for now, keep in mind that the order of operations applies to all operators in Python, and we’ll revisit it as we explore more complex operations later in the book.\nHere is the order of precedence for the basic arithmetic operators:\n\nExponentiation (**)\nThe exponentiation operator is evaluated first. It raises a number to the power of another.\nMultiplication (*), Division (/), Floor Division (//), Modulus (%)\nThese operators are evaluated next, from left to right.\nAddition (+), Subtraction (-)\nFinally, addition and subtraction are evaluated, also from left to right.\n\n\n6.2.7.1 Example of Operator Precedence\nLet’s see how this works in action:\nresult = 3 + 2 * 5 - 10 / 2\nprint(result)\n\n\n6.2.7.2 Here’s how the expression is evaluated:\n\nFirst, 2 * 5 is computed (multiplication).\nThen, 10 / 2 is computed (division).\nNext, the addition and subtraction are performed from left to right: 3 + (result of multiplication) and then subtracting the division result. Thus, the order is followed strictly as per the rules of precedence, and the result will be 10.0.\n\n\n\n6.2.7.3 Parentheses Override the Precedence\nYou can control the order of operations in your code by using parentheses () to change the default precedence. Anything inside parentheses is computed first.\n\nresult = (3 + 2) * (5 - 10 / 2)\nprint(result)\n\n0.0\n\n\nHere, the addition and subtraction are computed first due to parentheses, followed by multiplication and division.\n\n\n\n\n\n\nImportant\n\n\n\nThis section introduces the general order of arithmetic operations in Python. As we advance and introduce more operators, you’ll need to remember that operator precedence determines how expressions are evaluated, and we will come back to this concept when we cover more complex topics in the book.\n\n\n\n\n\n6.2.8 Using e in Arithmetic Operations\nIn Python, the letter e is often used in scientific notation to represent powers of 10. It is not an operator, but rather a part of a number written in exponential form. The e can be used in arithmetic operations just like any other number. The expression 2e3 means ( 2 ^3 ), which is equal to 2000.\n\n6.2.8.1 Example:\n# Using e for scientific notation\nresult = 2e3  # 2 * 10^3 = 2000\nprint(result)\n\n\n6.2.8.2 Combining e with other Arithmetic Operators\nYou can also perform arithmetic operations with numbers written in scientific notation. Let’s see how this works with different operators:\n\n# Adding, subtracting, multiplying and dividing with e notation\nadd_result = 2e3 + 5e2  # Adding 2000 + 500\nsub_result = 5e3 - 1e3  # Subtracting 5000 - 1000\nmul_result = 3e2 * 4e1  # Multiplying 300 * 40\ndiv_result = 1e4 / 2e2  # Dividing 10000 / 200\nsmall_value = 1e-4  # A small value, equivalent to 0.0001\n\nprint(\"Addition:\", add_result)    \nprint(\"Subtraction:\", sub_result)\nprint(\"Multiplication:\", mul_result) \nprint(\"Division:\", div_result)  \nprint(\"Small value:\", small_value)  \n\nAddition: 2500.0\nSubtraction: 4000.0\nMultiplication: 12000.0\nDivision: 50.0\nSmall value: 0.0001\n\n\n\n\n6.2.8.3 Exponentiation with e\nWhen used with exponentiation (**), e represents powers of 10, and the operation behaves like normal arithmetic:\n\nexp_result = 2e3 ** 2  # 2000^2\nprint(exp_result)\n\n4000000.0\n\n\n\n\n6.2.8.4 Why Use e?\nUsing e allows us to easily handle large or small numbers without typing out all the zeros. It’s especially helpful in scientific and engineering calculations where such numbers frequently occur.\n\n\n\n6.2.9 Summary of Arithmetic Operators\nIn this chapter, we explored the core arithmetic operators in Python and how they are used to perform calculations.\n\n6.2.9.1 Key Points\n\nOrder of Operations: Python follows a specific order of precedence when evaluating arithmetic expressions. Exponentiation (**) is evaluated first, followed by multiplication, division, floor division, and modulus, and finally, addition and subtraction. Parentheses can be used to control the order of evaluation.\nUsing e in Arithmetic: We also discussed how e is used in Python to represent numbers in scientific notation (e.g., 2e3 represents 2000). We demonstrated how to perform arithmetic with scientific notation and how e can be combined with other operators like addition, subtraction, multiplication, division, and exponentiation.\n\n\n\n6.2.9.2 Arithmetic Operators Table\n\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample\nOutput\n\n\n\n\n+\nAddition: Adds two operands.\n5 + 3\n8\n\n\n-\nSubtraction: Subtracts the second operand from the first.\n5 - 3\n2\n\n\n*\nMultiplication: Multiplies two operands.\n5 * 3\n15\n\n\n/\nDivision: Divides the first operand by the second. Returns float.\n5 / 3\n1.6667...\n\n\n//\nFloor Division: Divides and returns the largest integer less than or equal to the result.\n5 // 3\n1\n\n\n%\nModulus: Returns the remainder of a division operation.\n5 % 3\n2\n\n\n**\nExponentiation: Raises the first operand to the power of the second.\n2 ** 3\n8\n\n\n\n\n\n6.2.9.3 Important Notes:\n\nInteger Division (//) always returns the largest whole number less than or equal to the result of division.\nModulus (%) can be used to check divisibility and is commonly used in algorithms like checking if a number is even or odd.\nExponentiation (**) is often used for calculating powers, square roots, and mathematical functions.\n\n\n\n6.2.9.4 Next Steps\nAs you continue to experiment with these operators, remember that these foundational concepts will help you tackle more advanced topics later in the book. You will explore more operators and complex expressions as we build on this knowledge.\n\n\n\n\n\n\nTip\n\n\n\nFeel free to modify the examples and experiment with different operations. Create your own expressions and see how Python handles them. The more you play with these operators, the more comfortable you will become using them in real-world applications.",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic Operators in Python</span>"
    ]
  },
  {
    "objectID": "chapter5.html#arithmetic-operators--",
    "href": "chapter5.html#arithmetic-operators--",
    "title": "6  Basic Operators in Python",
    "section": "7.1 Arithmetic operators (+, -, *, /)",
    "text": "7.1 Arithmetic operators (+, -, *, /)",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic Operators in Python</span>"
    ]
  },
  {
    "objectID": "chapter5.html#comparison-and-logical-operators",
    "href": "chapter5.html#comparison-and-logical-operators",
    "title": "6  Basic Operators in Python",
    "section": "7.2 Comparison and logical operators",
    "text": "7.2 Comparison and logical operators",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic Operators in Python</span>"
    ]
  },
  {
    "objectID": "chapter5.html#taking-user-input-with-input",
    "href": "chapter5.html#taking-user-input-with-input",
    "title": "6  Basic Operators in Python",
    "section": "7.3 Taking user input with input()",
    "text": "7.3 Taking user input with input()",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic Operators in Python</span>"
    ]
  },
  {
    "objectID": "chapter5.html#project-1-simple-temperature-converter",
    "href": "chapter5.html#project-1-simple-temperature-converter",
    "title": "6  Basic Operators in Python",
    "section": "7.4 Project 1: Simple Temperature Converter",
    "text": "7.4 Project 1: Simple Temperature Converter",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic Operators in Python</span>"
    ]
  },
  {
    "objectID": "chapter5.html#convert-between-celsius-fahrenheit-and-kelvin",
    "href": "chapter5.html#convert-between-celsius-fahrenheit-and-kelvin",
    "title": "6  Basic Operators in Python",
    "section": "7.5 Convert between Celsius, Fahrenheit, and Kelvin",
    "text": "7.5 Convert between Celsius, Fahrenheit, and Kelvin",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic Operators in Python</span>"
    ]
  },
  {
    "objectID": "chapter5.html#use-input-from-the-user-and-perform-arithmetic-operations",
    "href": "chapter5.html#use-input-from-the-user-and-perform-arithmetic-operations",
    "title": "6  Basic Operators in Python",
    "section": "7.6 Use input from the user and perform arithmetic operations",
    "text": "7.6 Use input from the user and perform arithmetic operations",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic Operators in Python</span>"
    ]
  },
  {
    "objectID": "chapter5.html#format-and-display-the-result",
    "href": "chapter5.html#format-and-display-the-result",
    "title": "6  Basic Operators in Python",
    "section": "7.7 Format and display the result",
    "text": "7.7 Format and display the result",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Basic Operators in Python</span>"
    ]
  },
  {
    "objectID": "chapter6.html",
    "href": "chapter6.html",
    "title": "7  ty",
    "section": "",
    "text": "8 Basic Input and Output",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ty</span>"
    ]
  },
  {
    "objectID": "chapter6.html#taking-user-input-with-input",
    "href": "chapter6.html#taking-user-input-with-input",
    "title": "7  ty",
    "section": "8.1 Taking user input with input()",
    "text": "8.1 Taking user input with input()",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ty</span>"
    ]
  },
  {
    "objectID": "chapter6.html#project-1-simple-temperature-converter",
    "href": "chapter6.html#project-1-simple-temperature-converter",
    "title": "7  ty",
    "section": "8.2 Project 1: Simple Temperature Converter",
    "text": "8.2 Project 1: Simple Temperature Converter",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ty</span>"
    ]
  },
  {
    "objectID": "chapter6.html#convert-between-celsius-fahrenheit-and-kelvin",
    "href": "chapter6.html#convert-between-celsius-fahrenheit-and-kelvin",
    "title": "7  ty",
    "section": "8.3 Convert between Celsius, Fahrenheit, and Kelvin",
    "text": "8.3 Convert between Celsius, Fahrenheit, and Kelvin",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ty</span>"
    ]
  },
  {
    "objectID": "chapter6.html#use-input-from-the-user-and-perform-arithmetic-operations",
    "href": "chapter6.html#use-input-from-the-user-and-perform-arithmetic-operations",
    "title": "7  ty",
    "section": "8.4 Use input from the user and perform arithmetic operations",
    "text": "8.4 Use input from the user and perform arithmetic operations",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ty</span>"
    ]
  },
  {
    "objectID": "chapter6.html#format-and-display-the-result",
    "href": "chapter6.html#format-and-display-the-result",
    "title": "7  ty",
    "section": "8.5 Format and display the result",
    "text": "8.5 Format and display the result",
    "crumbs": [
      "Part 1 - Getting Started",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ty</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "8  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]