# Chapter 1 - Introduction to Python
## What is Python? And Why Even Bother Learning It Now (In the AI Era)?

When you go and look for a formal definition, you’ll probably see something like:\

**“Python is a general-purpose, high-level, interpreted programming language created by Guido van Rossum and first released in 1991. It is known for its simplicity and readability, making it a great choice for beginners as well as experienced developers.”**

Well, if you’re new to programming, this definition probably didn’t tell you much. Since this book is intended for readers at all programming levels, we will break down each new term in a simple and clear way. Sometimes, if necessary, we’ll explain things more than once—because understanding the basics well is key to mastering Python.
Let’s go over some of the important keywords in this definition in a way that actually makes sense:

**Language:** Python is a programming language because it gives you a way to communicate with computers. You write Python code to tell the computer what to do, just like you’d tell a friend what to do using words.

**General-purpose:** Python is a general-purpose language, meaning you can use it for pretty much anything. Whether you want to build a website, analyze data, make games, automate tasks, or even explore artificial intelligence, Python (and this book) has got you covered.

**High-level:** Python is called a high-level language because it’s designed to be easy for humans to read and write. Unlike low-level languages that deal directly with how the computer works, Python allows you to focus on solving problems without worrying about technical details like memory management. This makes coding much simpler and more beginner-friendly.

This is actually a good place to have our first glance at some code. Let's say you would like to write a program that interacts with a user by asking for its name. 

In python as it is a High-level language this can be a simple one liner code:

```
name = input("Enter your name: ")

```

Now lets see what the same program looks like when it is implemented in **C** which is a Low-level language :

```
#include <stdio.h>

int main() {
    char name[100];  // Allocate memory for the name

    // Get user input
    printf("Enter your name: ");
    scanf("%99s", name);  // Caution with buffer overflow!
    
    return 0;
}
```

Note how long and much more complicated it is! The main reason for this extra lines of code is that a low-level language gives us more control over hardware and system resources, hence it requires you - the programmer, to also think about memory management, data types, explicit error handling, and more.

Python as a High-Level language is designed to abstract away most of the complexities of dealing with the machine or hardware. You can focus on writing logic, rather than worrying about memory management, compilation, or system-specific details. The language is forgiving and lets you focus on what you want to achieve without dealing with low-level operations.

**Interpreted:** Python is an interpreted language, meaning the computer reads and runs your code one step at a time instead of processing everything at once before running it. This makes testing and debugging easier but can sometimes make Python a bit slower than languages that compile everything first.

## Why Learn Python Now? (The AI Connection)

We’re living in the AI era, where artificial intelligence is transforming industries at an unprecedented pace. From self-driving cars to chat bots, AI is everywhere—and Python is at the heart of it all.

Python is the go-to language for AI and machine learning because of its vast ecosystem of tools (libraries), such as TensorFlow, PyTorch, and Scikit-learn (no worries we will learn about libraries in the next lessons). These tools make it easier to build intelligent systems without having to write complex code from scratch.

But AI isn’t the only reason to learn Python. Python’s simplicity, versatility, and beginner-friendly nature make it a perfect starting point for anyone who wants to step into the world of programming, whether your goal is to get into AI, web development, automation, or just solve everyday problems with code.

In the next section, we’ll explore exactly why Python is considered one of the most beginner-friendly programming languages—and why it’s often recommended as the first language to learn.

## Why is Python Beginner-Friendly?

**Simple and Clear Syntax** Python’s syntax is often described as “elegant” because of how clean and straightforward it is. If you’re just starting out with programming, Python lets you focus on learning core programming concepts, such as variables, loops, and functions, without getting bogged down by complex syntax rules. For example, here’s how you would write a program that print “Hello, World!” to the screen in Python:

```{python}
print("Hello, World!")
```
Compared to other High-level languages like C++ or Java, where you’d have to write more boilerplate code, Python’s version is minimal, allowing you to start writing meaningful code right away.

**Readable Code** Python places a strong emphasis on code readability. Its use of indentation (rather than curly braces in many other languages) to define code blocks makes Python programs visually cleaner and easier to follow.
This structure makes Python ideal for beginners because it encourages the creation of clean and well-organized code, which is key to developing good programming habits early on.

**Dynamic Typing** Python is dynamically typed, which means you don’t need to specify the type of variable (like an integer or string) when you declare it. You can directly assign a value to a variable, and Python will figure out the type for you.
For example:
```{python}
x = 5           # x is automatically an integer
name = "Alice"  # name is automatically a string
```

This is different from languages like Java or C++, where you have to explicitly define the type of each variable. Dynamic typing makes Python more flexible and allows you to focus on solving problems rather than worrying about types.

**Large, Supportive Community** Python has one of the largest and most active programming communities in the world. Whether you need help troubleshooting an issue or want to learn about the latest Python libraries, there are countless forums, tutorials, and documentation available to help you.
The Python community is known for being friendly and welcoming to newcomers, and you’ll find plenty of resources to guide you every step of the way as you start learning.

**Extensive Libraries and Frameworks** Another reason Python is beginner-friendly is because of its vast selection of libraries and frameworks. These pre-built tools allow you to avoid reinventing the wheel and instead focus on building your applications faster.
For example, if you want to build a website, you can use frameworks like Django or Flask. If you’re interested in data science, there are powerful libraries like Pandas, NumPy, and Matplotlib to help you manipulate and visualize data. These libraries are designed to be easy to use and can dramatically speed up your development process.

**Cross-Platform Compatibility** Python is a cross-platform language, meaning you can run your Python code on any major operating system, such as Windows, macOS, and Linux, without having to make any changes. This makes Python a versatile choice for developers who want to build applications that can work across multiple platforms.

\newpage
# Setting up Python